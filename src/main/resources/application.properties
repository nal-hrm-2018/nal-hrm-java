#spring.datasource.url=${JDBC_DATABASE_URL}
#spring.datasource.username=${JDBC_DATABASE_USERNAME}
#spring.datasource.password=${JDBC_DATABASE_PASSWORD}
#spring.jpa.show-sql=false
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create
# ===============================
# DATASOURCE
# ===============================
server.port=8081
#Connection url for the database "nal_hrm"
spring.datasource.url = jdbc:mysql://localhost:3306/nal_hrm?autoReconnect=true&useSSL=false&useUnicode=yes&characterEncoding=UTF-8

#MySQL username and password
spring.datasource.username=root
spring.datasource.password=1

#Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle=true
spring.datasource.dbcp.validation-query=SELECT 1

# ===============================
# JPA / HIBERNATE
# ===============================

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

spring.jpa.generate-ddl = true
spring.thymeleaf.cache=false
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
